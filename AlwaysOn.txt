Функция AlwaysOn редназначена для обеспечения отказоустойчивости баз данных. 
Именно баз банных, а не инстансов, в которых эти базы данных работают. 
Работает эта технология, осуществляя репликацию базы данных между серверами, точнее — лога транзакций.
Указываем схему работы с этими серверами, все они будут реплицировать на себя данные выбранной БД.
Не забываем создать на всех серверах группы логины для пользователей данной БД. Один или два 
сервера могут поддерживать синхронную репликацию с исходным набором данных. Один из них должен
быть Failover-ready, чтобы в случае проблем с Primary успеть перехватить обслуживание клиентов на себя.
По умолчанию Secondary ничем не занимаются и просто жрут электричество. Если поставить галочку ‘Read Access Allow’
обычный Secondary, находящийся в режиме синхронной репликации, превращается в Active Secondary или Readable Secondary.

 «А какая нам польза от этого нахлебника?» — спросите вы. Во-первых, он может обслуживать запросы чтения. 
 Особенно если приложение, подключающееся к группе доступности, делает это исключительно с целью 
 считывания данных (Read Only), то есть в строке инициализации соединения есть параметр ‘Application 
 Intent=readonly’. Во-вторых, для баз, находящихся в Availability Group, есть замечательная опция ‘Use 
 secondary for backup’. Таким образом, даже если базы разрослись до таких объемов, что бэкап занимает 
 24 часа — вы можете спокойно делать его с реплики данных на Secondary, не пытаясь впихнуть в одни 
 сутки рабочий день офиса и окно обслуживания сервера. Это особенно удобно для серверов БД с режимом 
 работы 24/7. В целом при аккуратной правке приложений, работающих с базой, можно добиться того, что 
 все операции чтения будут производиться с активных Secondary, а операции записи будут сконцентрированы 
 на Primary. 
