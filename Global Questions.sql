Global Questions
2. What is the difference between a clustered index and a non-clustered index? 1. The table can only have one clustered index and many non-clustered indexes. 2. The clustered index defines the order the data is stored with.  3. The leaf pages of the clustered index have all the data in the table. 4. The leaf pages of the non-clustered index have the key columns, included columns and a pointer to the Cluster key or the RID.  
3. What is the difference between a table with a clustered index and a table without a clustered index? 1. The table with the clustered index has its data sorted by the cluster key. 2. The table without the clustered index stores the data in different locations without maintaining its sort order. 3. Fragmentation in a heap (table without clustered index) is more common than a clustered index. 4. A clustered index can be rebuilt, a heap (table without clustered index) cannot (unless a clustered index is created on dropped on it).  
4. Is the primary key the same as the clustered index? A: By default the primary key is created as a clustered index, however it can be either a clustered index or a non-clustered index.  
5. In SQL Server, what is the difference between an index scan, an index seek and a table scan? 1. Index scan reads all the leaf pages/records of the index. 2. Index seek navigates the b-tree to find specific records.  
6. What are statistics? A: Statistics represent the distribution of the data in a column or a group of columns to help the optimizer to take its decisions.  
7. When are statistics updated? 1. When an index is rebuild. 2. When a query identifies that the statistics are out of date. 3. When the UPDATE STATISTICS clause is executed for a statistics object. 4. When sp_udpatestats stored procedure runs in the database.  
8. What is the difference between a filtered index and a partitioned index? 1. The filtered index is created on a subset of the rows in the table. 2. A filtered index can only be created as a non-clustered index. 3. A partitioned index is created on all the rows of the table and created different partitions for it. 4. A partitioned index can be either clustered or non-clustered. 5. A partitioned index can have different partitions in different filegroups. 6. A partitioned index needs a partition function and a partition scheme. 7. A partitioned index can rebuild one partition at a time. 8. A partitioned index partition cannot be rebuilt online.  9. A whole partitioned index can be rebuilt online. 
9. What is the difference between a SQL login and a database user? 1. A SQL login belongs to the instance and allows access to the instance. 2. Server level permissions are assigned to a SQL login. 3. A SQL login can or cannot be mapped to 0 or more databases. 4. A database user belongs to only one database. 5. A database user can only be granted database level permissions.  
10. A replication topology is needed where the 5 different SQL Server instances needs to replicate their changes to all the other servers in the replication topology. Which replication type needs to be used? A: Peer to Peer replication  
11. Which SQL Server high availability technology allows the have a copy of a subset of the data in the database? A: Replication  
12. Which SQL Server high availability technologies depend directly on the transaction log to function? 1. Replication 2. Database mirroring 3. Log Shipping 4. Availability groups  
13. What are the replication types available in SQL Server? 1. Transactional 2. Snapshot 3. Merge 4. Peer to Peer  
14. What are the recovery models available and a brief overview of how they work? 1. Full a. Allows point in time recovery. b. Needs transaction log backups to truncate the transaction log. c. All operations are fully logged. 2. Simple a. Doesn’t allow point in time recovery. b. Transaction log truncation happens automatically. c. Cannot take transaction log backups. d. Supports optimized logging for some minimally logged operations. 3. Bulk logged a. Doesn’t allow point in time recovery. b. Needs transaction log backups to truncate the transaction log. c. Supports optimized logging for all minimally logged operations.   
15. What are the backup types available in SQL Server and a brief overview of how they work. 1. Full : Takes a full copy of the data and transaction logs. 2. Differential: Takes a copy of all the data pages that have been changed since the last full backup. 3. Transaction Log: Takes a copy of all the log records that have not been backed up since the last full or transaction log backup. When the database is in bulk logged recovery model, it includes data pages if a minimally logged operation was performed. 4. Partial: Takes a copy of all the data files on all the read/write filegroups and can include read only filegroups if explicitly specified. 5. Filegroup or file: a copy of specified file or filegroups in a database. 6. Copy only: an option to database backups to take backups that do not interfere in the backup chain.  
16. Table A is in schema AAA. Table B is in schema BBB. User B owns table BBB.B. Stored procedure C is created on schema AAA, it queries both table AAA.A and table BBB.B and User A is granted execute permissions on the stored procedure. Does User A has enough permissions to execute the stored procedure successfully? A: No. the user needs explicit permissions on table BBB.B  
17. A solution is requested where an entire copy of a group of databases is kept in a different server. The solution must react to failures at both the server and storage levels. The solution uses SQL Server 2012 Enterprise edition. Which SQL Server high availability solution is required for this requirements and in which mode it needs to be set? A: Availability groups with synchronous availability mode and automatic failover   
18. Can statistics be filtered? A: Yes  
19. Under which situations a second transaction log file would be needed? 1. The database is in full or bulk logged recovery model, disk where the transaction log file exist has no more space, it cannot be expanded, however there is another disk with available space and a transaction log backup wouldn’t help to reduce the transaction log file size and no downtime can be taken to move the transaction log file to a different disk drive. 2. The transaction log file exist in a very slow disk, database is in full or bulk logged recovery model, no downtime can be taken, and an attempt to help performance is done by adding a faster disk to the server and adding a second transaction log file in the faster disk. However this would only help at the times SQL decides to use the transaction log file in then faster disk, so performance improvement will be intermittent. 3. There are no other situations where this would be needed as no performance gains are achieved by putting many transaction log files for the same database in different disks or the same disk as the transaction log uses one file at a time
